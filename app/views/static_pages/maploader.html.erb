<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- 
	Example from Nokia Maps API Playground, for more information visit http://api.maps.nokia.com
 -->
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="X-UA-Compatible" content="IE=7; IE=EmulateIE9"/>
		<base href="http://api.maps.nokia.com/en/playground/examples/maps/map_essentials/moving.html" />
		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
		<title>Instanokia Maps</title>
		<meta name="description" content="Panning the map up, down, left, right and setting it to a particular location"/>
		<meta name="keywords" content="moving, map essentials, pan, drag"/>
		<!-- For scaling content for mobile devices, setting the viewport to the width of the device-->
		<meta name=viewport content="width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
		<!-- Styling for example container (NoteContainer & Logger)  -->
		<link rel="stylesheet" type="text/css" href="http://api.maps.nokia.com/en/playground/exampleHelpers.css"/>
		<!-- By default we add ?with=all to load every package available, it's better to change this parameter to your use case. Options ?with=maps|positioning|places|placesdata|directions|datarendering|all -->
		<script type="text/javascript" charset="UTF-8" src="http://api.maps.nokia.com/2.2.3/jsl.js?with=all"></script>
		<!-- JavaScript for example container (NoteContainer & Logger)  -->
		<script type="text/javascript" charset="UTF-8" src="http://api.maps.nokia.com/en/playground/exampleHelpers.js"></script>
		<style type="text/css">
			html {
				overflow:hidden;
			}
			
			body {
				margin: 0;
				padding: 0;
				overflow: hidden;
				width: 100%;
				height: 100%;
				position: absolute;
			}
			
			#mapContainer {
				width: 100%;
				height: 60%;
				left: 0;
				top: 5%;
				position: absolute;
			}
		</style>
	</head>
	<body>
		<h1 style="color:black;">INSTANOKIA: INSTRAGRAM + NOKIA MAPS</h1>
		<div id="mapContainer"></div>
		<div id="uiContainer"></div>

		<script type="text/javascript" id="exampleJsSource">
			/*	Set authentication token and appid 
*	WARNING: this is a demo-only key
*	please register on http://api.developer.nokia.com/ 
*	and obtain your own developer's API key 
*/
nokia.Settings.set( "appId", "B6bk7hCkcVLMBDNJ2FWb"); 
nokia.Settings.set( "authenticationToken", "yuiTSbC57Ph_7C9bi-Z2kg");

// Get the DOM node to which we will append the map
var mapContainer = document.getElementById("mapContainer");
// Create a map inside the map container DOM node

// We create a new instance of InfoBubbles bound to a variable so we can call it later on
var infoBubbles = new nokia.maps.map.component.InfoBubbles();

var map = new nokia.maps.map.Display(mapContainer, {
	// Initial center and zoom level of the map
	center: [42.358431, -71.059773], //location
	zoomLevel: 15,
	components: [infoBubbles,
		// We add the behavior component to allow panning / zooming of the map
		new nokia.maps.map.component.Behavior(),
		new nokia.maps.map.component.ZoomBar()
	]
});

/* Create a marker on a specified geo coordinate 
 * (in this example we use the map's center as our coordinate)
 */
var standardMarker = new nokia.maps.map.StandardMarker(map.center);




/* We would like to add event listener on mouse click or finger tap so we check
 * nokia.maps.dom.Page.browser.touch which indicates whether the used browser has a touch interface.
 */
var TOUCH = nokia.maps.dom.Page.browser.touch,
	CLICK = TOUCH ? "tap" : "click";

/* Attach an event listener to the newly created marker
 * to show info bubble on click of the marker
 */
standardMarker.addListener(
	CLICK, 
	function (evt) { 
		// Set the tail of the bubble to the coordinate of the marker
		infoBubbles.openBubble('<img src="http://placekitten.com/200/400">', standardMarker.coordinate);
	}
);

// Next we add the standard marker to the map's object collection so it will be rendered onto the map.
map.objects.add(standardMarker);


// Binding of DOM elements to several variables so we can install event handlers.
var moveToUiElt = document.getElementById("moveTo"),
	centerUiElt = document.getElementById("centerCoord"),
	zoomlevelUiElt = document.getElementById("zoomlevel"),
	leftUiElt = document.getElementById("panLeft"),
	rightUiElt = document.getElementById("panRight"),
	upUiElt = document.getElementById("panUp"),
	downUiElt = document.getElementById("panDown"),
	// Geo coordinate of the Big Ben in London, United Kingdom
	coord = new nokia.maps.geo.Coordinate(51.500686851035184, -0.1246528142361285);

// Move map using map's set() by changing its center.
moveToUiElt.onclick = function () {
	/* map.set(x, y) takes two arguments;
	 * 		- x: The key needs to be set.
	 * 		- y: The new value to be set
	 *
	 * Example to set map center to [53, 13]
	 *	 latitude: 53, longitude: 13
	 * There are two other ways to specify a Coordinate:
	 * map.set("center", {lat: 53, lng: 13});
	 * map.set("center", new nokia.maps.geo.Coordinate(53,13));
	 */
	map.set("center", coord);
};

// Move map with map's pan()
leftUiElt.onclick = function () {
	/* Pans the map by the delta defined by start and end point.
	 *
	 * pan(startX, startY, endX, endY, animation) takes four arguments:
	 * 		- startX: The x-position of the pixel relative to the top-left 
	 * 				corner of the current view from where to start pan.
	 * 		- startY: The y-position of the pixel relative to the top-left 
	 * 				corner of the current view from where to start pan.
	 * 		- endX: The x-position of the pixel relative to the top-left 
	 * 				corner of the current view to where to pan.
	 * 		- endY: The y-position of the pixel relative to the top-left 
	 * 				corner of the current view to where to pan.
	 * 		- [animation]: Optional argument. 
	 *  			The animation to be used while modifying 
	 * 				the view, must be a value from the animation list.
	 * 				The list can be found in map.animation.
	 */
	map.pan(0, 0, -30, 0, "default");
};
rightUiElt.onclick = function () {
	map.pan(0, 0, 30, 0, "default");
};
upUiElt.onclick = function () {
	map.pan(0, 0, 0, -30, "default");
};
downUiElt.onclick = function () {
	map.pan(0, 0, 0, 30, "default");
};

// Set observers to update center and zoomlevel elements
map.addObserver("center", function () {
	centerUiElt.innerHTML = "<b>Center:</b> " + map.center;
});
map.addObserver("zoomLevel", function () {
	zoomlevelUiElt.innerHTML = "<b>Current zoomlevel:</b> " + map.zoomLevel;
});

// Set start values for center and zoomlevel elements
centerUiElt.innerHTML = "<b>Center:</b> "+ map.center;
zoomlevelUiElt.innerHTML = "<b>Current zoomlevel:</b> " + map.zoomLevel;


		</script>
	</body>
</html>
